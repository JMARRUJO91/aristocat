# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '45 22 * * 1'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"INCLUDE_DIRECTORIES(
  ${HDF5_INCLUDE_DIRS}
  ${MPI_INCLUDE_DIRS}
  ${PROJECT_BINARY_DIR}/include
  ${PROJECT_SOURCE_DIR}/include
)

SET(mdump_SOURCES 
  mdump.c 
  MED23meshIterators.c 
  MED23fieldIterators.c
  )
  
SET(mdump_SOURCES 
  mdump3.c 
  MED23meshIterators.c 
  MED23fieldIterators.c
 )

ADD_EXECUTABLE(mdump ${mdump_SOURCES})
TARGET_LINK_LIBRARIES(mdump ${MEDFILE_ENGINE_LIB})

ADD_EXECUTABLE(mdump3 ${mdump_SOURCES})
TARGET_LINK_LIBRARIES(mdump3 ${MEDFILE_ENGINE_LIB})

INSTALL(TARGETS mdump DESTINATION bin)
INSTALL(TARGETS mdump3 DESTINATION bin)

# Configure and install xmdump

SET(prefix ${CMAKE_INSTALL_PREFIX})
CONFIGURE_FILE(xmdump2.in ${PROJECT_BINARY_DIR}/xmdump2 @ONLY)
CONFIGURE_FILE(xmdump3.in ${PROJECT_BINARY_DIR}/xmdump3 @ONLY)

INSTALL(PROGRAMS ${PROJECT_BINARY_DIR}/xmdump2 ${PROJECT_BINARY_DIR}/xmdump3 DESTINATION bin)
/*  This file is part of MED.
 *
 *  COPYRIGHT (C) 1999 - 2016  EDF R&D, CEA/DEN
 *  MED is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  MED is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with MED.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef MAJ_231_232_H
#define MAJ_231_232_H


#ifdef __cplusplus
# include "MEDerreur.hxx"
#endif

extern void MAJ_231_232_maillages (med_idt fid);
extern void MAJ_231_232_champs    (med_idt fid);
extern int  MAJ_231_232_chaine    (char * nomi, char * nomf);


extern med_err MED231champNormaliser(med_idt fid, char * nomcha, med_type_champ typcha, med_int ncomp,
				     med_entite_maillage entite);

extern med_err MED231champLireEtUnlink(med_idt fid,char *maa, char *cha, unsigned char *val,med_mode_switch interlace,med_int numco,
				       char * locname, char *profil, med_mode_profil pflmod, 
				       med_entite_maillage type_ent, med_geometrie_element type_geo,
				       med_int numdt, med_int numo);

extern med_err MED231champRefInfoEtRenMaa(med_idt fid,char *champ,
					     med_entite_maillage type_ent, med_geometrie_element type_geo,
					     int indice, med_int numdt, med_int numo,
					     char * maa, med_booleen * local, med_int *ngauss);

extern med_err MED231champInfoEtRen(med_idt fid,int indice,char *champ,
				    med_type_champ *type,char *comp,char *unit, 
				    med_int ncomp);


#endif
/*  This file is part of MED.
 *
 *  COPYRIGHT (C) 1999 - 2016  EDF R&D, CEA/DEN
 *  MED is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  MED is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with MED.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef MAJ_21_22_H
#define MAJ_21_22_H

#ifdef __cplusplus

#include "MEDerreur.hxx"

#endif

extern void MAJ_21_22_chaine               (char *ancienne_chaine,char *nouvelle_chaine,med_int n);
extern void MAJ_21_22_champs               (med_idt fid);
extern void MAJ_21_22_elements_maillage    (med_idt mid, med_int dimension);
extern void MAJ_21_22_familles_maillage    (med_idt mid);
extern void MAJ_21_22_localisation_Gauss   (med_idt fid,char *nom_modele,med_int ngauss);
extern void MAJ_21_22_maillages            (med_idt fid);
extern void MAJ_21_22_noeuds_maillage      (med_idt mid, med_int dimension);
extern void MAJ_21_22_profils              (med_idt fid,med_int nprofil);

/* depuis la 3.0.0*/
med_err _MED23v30stringConvert(char *chaine30, med_int substrsize30,
			       char *chaine23, med_int substrsize23,
			       med_int nsubstr );

#endif
/*  This file is part of MED.
 *
 *  COPYRIGHT (C) 1999 - 2016  EDF R&D, CEA/DEN
 *  MED is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  MED is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with MED.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef MAJ_310_320_H
#define MAJ_310_320_H


#ifdef __cplusplus
# include "MEDerreur.hxx"
#endif

extern void MAJ_310_320_familles(med_idt fid);

#endif

